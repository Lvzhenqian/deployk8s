# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: kubernetes-dashboard

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  ports:
    - port: 443
      targetPort: 8443
      nodePort: 38000
  type: NodePort
  selector:
    k8s-app: kubernetes-dashboard

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-certs
  namespace: kubernetes-dashboard
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrVENDQWVHZ0F3SUJBZ0lKQUx1KzhoOUhVdDBHTUEwR0NTcUdTSWIzRFFFQkN3VUFNQk14RVRBUEJnTlYKQkFNTUNHOXdaVzUwWlhOME1CNFhEVEU1TVRJek1UQTNNekF4TWxvWERUSTVNVEl5T0RBM016QXhNbG93RXpFUgpNQThHQTFVRUF3d0liM0JsYm5SbGMzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCCkFRRE5kOTNVTVJ5UzNkOFVNU1NmOGtxdFNkVDdsMXNsWVpzdEo3b3llZnU3YVQ0NlhIM2NEWm9lNXBicDlZakkKaXlhQmdySzFFZC9lcXB0ZndnWDBRVXRDcXlJK2JMRXAxWUo3RmNRUG8wRmVBdUR1ZFdIeDd0a3hNOS8zTVFBSAp3WVZCWWIzdWRtM0JxT0hTYWhkYjUyUTd4NjQvMHhETGFqMXd3M1dtcTM5SmNlTlprbUw1eFpBR2tkZXZnU0VtCitIZ3pnOFV1eHdZZ0laYWFuemlkS0plWC94V0JGaERrUHg4YmNkMy9LblNONDVGR05YMlp6bUdRbVI3Uk9DK3AKOFR0SkxoMzkxbVptT1M4Q25hSmVuM2hLRDkyMEJYem4rUG5NYVk5cHpRRzZieDNsSk5VcWlOT1h5bGpzSTJUcQp6WGxzdE5tYXFTUmViK0xOZjBzV0U1ejVBZ01CQUFHalVEQk9NQjBHQTFVZERnUVdCQlRWM1FFVm1US0NlZlcwCnhkeXhETHVEMTNmM0pqQWZCZ05WSFNNRUdEQVdnQlRWM1FFVm1US0NlZlcweGR5eERMdUQxM2YzSmpBTUJnTlYKSFJNRUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCK3l2clZuVW43cE9YdDE5OXBjaWxEalBxNgpML1JuM0dBMWVaZWhJSndYdFNPeGE5Q1N5RENqZEhjUGwvL2N4NDg5Vmd5blMvcHh4YXJ2SW9BNTZSdkRLUGM5CkFuMGF2TjZTbHhrRXRHUExHdjdNUGRiNDAzYUIyWDVFd1lzbElydDBremdBZHkrNElyUTFlbDJxTWVORVA3ancKUUk5a3RnSnBTVUtQVFg3NXBRSDJmZjFDTFQ0U1ViOUtldWU1VUtaSVd6NlBZRWFSMGRCU0c1b1dBZkl6MVdTVApQRXZFTlZ4THZNaDhIOFlGd2MrWVVuMzh3UlVPeW8rdVJiYWpmdFczcW5uWDlWdWZTT093cWdoVGNKNUpEU3Y5CjBqTjNBRHVjL3dFeHQ4a25CT3dtM0N5UGMyaE40Ynhhcm1CRU5GNHh4Wk5sNzhyekt2SkNsa09IYys1YQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBelhmZDFERWNrdDNmRkRFa24vSktyVW5VKzVkYkpXR2JMU2U2TW5uN3UyaytPbHg5CjNBMmFIdWFXNmZXSXlJc21nWUt5dFJIZjNxcWJYOElGOUVGTFFxc2lQbXl4S2RXQ2V4WEVENk5CWGdMZzduVmgKOGU3Wk1UUGY5ekVBQjhHRlFXRzk3blp0d2FqaDBtb1hXK2RrTzhldVA5TVF5Mm85Y01OMXBxdC9TWEhqV1pKaQorY1dRQnBIWHI0RWhKdmg0TTRQRkxzY0dJQ0dXbXA4NG5TaVhsLzhWZ1JZUTVEOGZHM0hkL3lwMGplT1JSalY5Cm1jNWhrSmtlMFRndnFmRTdTUzRkL2RabVpqa3ZBcDJpWHA5NFNnL2R0QVY4NS9qNXpHbVBhYzBCdW04ZDVTVFYKS29qVGw4cFk3Q05rNnMxNWJMVFptcWtrWG0vaXpYOUxGaE9jK1FJREFRQUJBb0lCQVFDTXY5WG5xNVRsVHJPbwpBMW9SYjBxVWxvVWRxN3MyU2p5Z25CeEN3NmtiNHFaTUdGdm5TRElSaE9oUWNIQTQ0SW1LSWx3RkNhK1B1dE1nCnI2cWdmYkh1ZzRpN3RuMU9LUUp2Q3FQNkNsMlc1dVhxcytKYWRzRzFvTkdGWmIyZGtvV1VHajZmZ2VVQnlveVgKTlRHM05UVkdkaXo1Yjc2TGVjV0kzM3hTcGh4VjFFR2JWcGZjMXhaQ0dQMEdpM3hDb3RrNHpJWlNpbGxWTXNJSwpTeXplNnM4SDZTeVJ6TStRTVpaaXdzVkx5Y0p2dUNkaXQxdHd0MkdkUi9xak9LTGljSU9YSHo2Uzk5SFV4WlczCjhMZzF2dEQ1ZFZHMUhCL2Y2aDZkcjRqelVVWVJsM0Zsc2NFeU1GRGMyY3BveHlLUFpzKzlQUEhsK2VwSUFzSmUKTUx2T00vaTVBb0dCQVBPMHlvTGNaTFVKbHJCbitpZjdSK1RsbTFadmZ2WXE5c0M4WmlUSWpnVmpHVCtEbTh5bgp3bVZRT3lNaFhiRTZKOXI3dUJVN2VsSEt4eXRvMEZKaDFqWXAzNk1tdm8vVVNScjVURDkycEF2NzZQTkN4VjYzCng0eEF1ZjR2LzFiQ21nRDhsUG9UODFxNjdva2wwclM5ZmQzOHZIOW0wcEI4MEFCY3ZKdGJyeGc3QW9HQkFOZlYKUmF4WFJqZ2xYb1FEWWEvY1pmcDc4RUxlRWZpSS9taERjWkhGZTZveXFVd2RKdDQzVFkySHlHOXh2d3E4Q1dmVgpYeElJNytkM0J4dTZVV2gxTVFmaVlOSDdXNDNyUytmWW15OVgyQ3JPamlIdlYxVUliOEJTVjZnY0xFQUNxMjlLCkFnNkwyV1JsYWdKSVY1U1RIN0NVMElzdUlDTFpzVUJyczdObElnQmJBb0dCQUladWFQTXNqYVRMaUVNQTZCM2IKMzdtazZqNFF2TkVmdkFOdktVMExFRVJxZU1mdldpYlhOMFZacjNWZWQyZEd0Q3Q0aFArNVVtMEIxVUhkekdSVgpNYXVwQjRMZzRXZEhhNWdrZ21uVGtRUkhUaVc1NUZPdVByWGdFbmpqa3c4Unc0L2R4SFA2UTFmK0c0eXR2NEFSCnN2ZWI3WUs5ZmxOVGRnMXRHbUQ4ZnlaM0FvR0JBTFpDQk5ucHdRUThtam5FV1VPV1RBOWZoWjRSeFA4cFFCeHYKaDRIZlQvU0RYMjlFMXNPajA3dUdRLzNJQWRsZ3ZGaVFWLzMweWhHZDg4UzRhM0pZTkJWQ1Z4dzZ0Qzk5Mk5WcApsbkkrTGU3SUNrSWh5SStuMWlhRDRqMjF2TEE1RU9lamlXVWJOM0tPS1J6UVZoVEN3R251NE1RSEtXQUVrS2VqCnkxWGNPd0F0QW9HQkFNR2JqUEYrY1RKMWY3Z24vdysrS2JUUTJuSC9nZHhPTWR0aDNTYVpsZHRyR3JibzlaUGQKVVJXUkpkMUM2Qk50enVtQjFub05rYU1UVU14Q0VpM0VvY0tKRERyeVhuaHFNNmt3dExsTHYzYWl0ekM0b25SRApmWmdpRmNVNUNkc1hDV1VIVStWVnd4SXZmdEVud1hubEhjQ1ZDZHpZYWNVZ1F0MDByZ2NPdEJDYwotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-csrf
  namespace: kubernetes-dashboard
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-key-holder
  namespace: kubernetes-dashboard
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-settings
  namespace: kubernetes-dashboard

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: cluster-admin
roleRef:
  kind: ClusterRole
  name: cluster-dashboard-admin
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: cluster-admin
  namespace: kubernetes-dashboard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-admin
  namespace: kubernetes-dashboard

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
        - name: kubernetes-dashboard
          image: kubernetesui/dashboard:v2.0.0-beta8
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
#            - --auto-generate-certificates
            - --tls-cert-file=/ca.crt
            - --tls-key-file=/ca.key
            - --namespace=kubernetes-dashboard
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          volumeMounts:
            - name: kubernetes-dashboard-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: kubernetes-dashboard-certs
          secret:
            secretName: kubernetes-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: kubernetes-dashboard
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: dashboard-metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      containers:
        - name: dashboard-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.1
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}
